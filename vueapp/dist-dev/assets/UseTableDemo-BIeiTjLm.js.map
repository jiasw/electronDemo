{"version":3,"file":"UseTableDemo-BIeiTjLm.js","sources":["../../src/views/Components/Table/UseTableDemo.vue"],"sourcesContent":["<script setup lang=\"tsx\">\nimport { ContentWrap } from '@/components/ContentWrap'\nimport { useI18n } from '@/hooks/web/useI18n'\nimport { Table, TableColumn, TableSlotDefault } from '@/components/Table'\nimport { getTableListApi } from '@/api/table'\nimport { ref, reactive, unref, onMounted } from 'vue'\nimport { ElTag } from 'element-plus'\nimport { useTable } from '@/hooks/web/useTable'\nimport { BaseButton } from '@/components/Button'\n\nconst { tableRegister, tableMethods, tableState } = useTable({\n  fetchDataApi: async () => {\n    const { currentPage, pageSize } = tableState\n    const res = await getTableListApi({\n      pageIndex: unref(currentPage),\n      pageSize: unref(pageSize)\n    })\n    return {\n      list: res.data.list,\n      total: res.data.total\n    }\n  }\n})\nconst { loading, dataList, total, currentPage, pageSize } = tableState\nconst { setProps, setColumn, getElTableExpose, addColumn, delColumn, refresh } = tableMethods\n\nconst { t } = useI18n()\n\nconst columns = reactive<TableColumn[]>([])\n\nonMounted(() => {\n  setTimeout(() => {\n    setProps({\n      columns: [\n        {\n          field: 'expand',\n          type: 'expand',\n          slots: {\n            default: (data: TableSlotDefault) => {\n              const { row } = data\n              return (\n                <div class=\"ml-30px\">\n                  <div>\n                    {t('tableDemo.title')}：{row.title}\n                  </div>\n                  <div>\n                    {t('tableDemo.author')}：{row.author}\n                  </div>\n                  <div>\n                    {t('tableDemo.displayTime')}：{row.display_time}\n                  </div>\n                </div>\n              )\n            }\n          }\n        },\n        {\n          field: 'selection',\n          type: 'selection'\n        },\n        {\n          field: 'index',\n          label: t('tableDemo.index'),\n          type: 'index'\n        },\n        {\n          field: 'title',\n          label: t('tableDemo.title')\n        },\n        {\n          field: 'author',\n          label: t('tableDemo.author')\n        },\n        {\n          field: 'display_time',\n          label: t('tableDemo.displayTime')\n        },\n        {\n          field: 'importance',\n          label: t('tableDemo.importance'),\n          formatter: (_: Recordable, __: TableColumn, cellValue: number) => {\n            return (\n              <ElTag type={cellValue === 1 ? 'success' : cellValue === 2 ? 'warning' : 'danger'}>\n                {cellValue === 1\n                  ? t('tableDemo.important')\n                  : cellValue === 2\n                    ? t('tableDemo.good')\n                    : t('tableDemo.commonly')}\n              </ElTag>\n            )\n          }\n        },\n        {\n          field: 'pageviews',\n          label: t('tableDemo.pageviews')\n        },\n        {\n          field: 'action',\n          label: t('tableDemo.action'),\n          slots: {\n            default: (data) => {\n              return (\n                <BaseButton type=\"primary\" onClick={() => actionFn(data)}>\n                  {t('tableDemo.action')}\n                </BaseButton>\n              )\n            }\n          }\n        }\n      ]\n    })\n  }, 2000)\n})\n\nconst actionFn = (data: TableSlotDefault) => {\n  console.log(data)\n}\n\nconst canShowPagination = ref(true)\nconst showPagination = (show: boolean) => {\n  canShowPagination.value = show\n}\n\nconst reserveIndex = (custom: boolean) => {\n  setProps({\n    reserveIndex: custom\n  })\n}\n\nconst showSelections = (show: boolean) => {\n  setColumn([\n    {\n      field: 'selection',\n      path: 'hidden',\n      value: !show\n    }\n  ])\n}\n\nconst index = ref(1)\n\nconst changeTitle = () => {\n  setColumn([\n    {\n      field: 'title',\n      path: 'label',\n      value: `${t('tableDemo.title')}${unref(index)}`\n    }\n  ])\n  index.value++\n}\n\nconst showExpandedRows = (show: boolean) => {\n  setColumn([\n    {\n      field: 'expand',\n      path: 'hidden',\n      value: !show\n    }\n  ])\n}\n\nconst selectAllNone = async () => {\n  const elTableRef = await getElTableExpose()\n  elTableRef?.toggleAllSelection()\n}\n\nconst showAction = ref(true)\nconst delOrAddAction = () => {\n  if (unref(showAction)) {\n    delColumn('action')\n    showAction.value = false\n  } else {\n    addColumn({\n      field: 'action',\n      label: t('tableDemo.action'),\n      slots: {\n        default: (data) => {\n          return (\n            <BaseButton type=\"primary\" onClick={() => actionFn(data)}>\n              {t('tableDemo.action')}\n            </BaseButton>\n          )\n        }\n      }\n    })\n    showAction.value = true\n  }\n}\n\nconst showStripe = ref(false)\nconst showOrHiddenStripe = () => {\n  setProps({\n    stripe: !unref(showStripe)\n  })\n  showStripe.value = !unref(showStripe)\n}\n\nconst height = ref<string | number>('auto')\nconst fixedHeaderOrAuto = () => {\n  if (unref(height) === 'auto') {\n    setProps({\n      height: 300\n    })\n    height.value = 300\n  } else {\n    setProps({\n      height: 'auto'\n    })\n    height.value = 'auto'\n  }\n}\n\nconst getSelections = async () => {\n  const elTableRef = await getElTableExpose()\n  const selections = elTableRef?.getSelectionRows()\n  console.log(selections)\n}\n</script>\n\n<template>\n  <ContentWrap :title=\"`UseTable ${t('tableDemo.operate')}`\" style=\"margin-bottom: 20px\">\n    <BaseButton @click=\"showPagination(true)\">\n      {{ t('tableDemo.show') }} {{ t('tableDemo.pagination') }}\n    </BaseButton>\n    <BaseButton @click=\"showPagination(false)\">\n      {{ t('tableDemo.hidden') }} {{ t('tableDemo.pagination') }}\n    </BaseButton>\n\n    <BaseButton @click=\"reserveIndex(true)\">{{ t('tableDemo.reserveIndex') }}</BaseButton>\n    <BaseButton @click=\"reserveIndex(false)\">{{ t('tableDemo.restoreIndex') }}</BaseButton>\n\n    <BaseButton @click=\"showSelections(true)\">{{ t('tableDemo.showSelections') }}</BaseButton>\n    <BaseButton @click=\"showSelections(false)\">{{ t('tableDemo.hiddenSelections') }}</BaseButton>\n\n    <BaseButton @click=\"changeTitle\">{{ t('tableDemo.changeTitle') }}</BaseButton>\n\n    <BaseButton @click=\"showExpandedRows(true)\">{{ t('tableDemo.showExpandedRows') }}</BaseButton>\n    <BaseButton @click=\"showExpandedRows(false)\">{{\n      t('tableDemo.hiddenExpandedRows')\n    }}</BaseButton>\n\n    <BaseButton @click=\"selectAllNone\">{{ t('tableDemo.selectAllNone') }}</BaseButton>\n\n    <BaseButton @click=\"delOrAddAction\">{{ t('tableDemo.delOrAddAction') }}</BaseButton>\n\n    <BaseButton @click=\"showOrHiddenStripe\">{{ t('tableDemo.showOrHiddenStripe') }}</BaseButton>\n\n    <BaseButton @click=\"fixedHeaderOrAuto\">{{ t('tableDemo.fixedHeaderOrAuto') }}</BaseButton>\n\n    <BaseButton @click=\"getSelections\">{{ t('tableDemo.getSelections') }}</BaseButton>\n\n    <!-- <BaseButton @click=\"showOrHiddenSortable\">{{ t('tableDemo.showOrHiddenSortable') }}</BaseButton> -->\n  </ContentWrap>\n  <ContentWrap :title=\"`UseTable ${t('tableDemo.example')}`\">\n    <Table\n      v-model:pageSize=\"pageSize\"\n      v-model:currentPage=\"currentPage\"\n      showAction\n      showSummary\n      default-expand-all\n      :columns=\"columns\"\n      row-key=\"id\"\n      :data=\"dataList\"\n      :loading=\"loading\"\n      :pagination=\"\n        canShowPagination\n          ? {\n              total: total\n            }\n          : undefined\n      \"\n      @register=\"tableRegister\"\n      @refresh=\"refresh\"\n    />\n  </ContentWrap>\n</template>\n\n<style lang=\"less\" scoped>\n.el-button {\n  margin-top: 10px;\n}\n</style>\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","tableRegister","tableMethods","tableState","useTable","fetchDataApi","__async","currentPage","pageSize","res","getTableListApi","pageIndex","unref","list","data","total","loading","dataList","setProps","setColumn","getElTableExpose","addColumn","delColumn","refresh","t","useI18n","columns","reactive","onMounted","setTimeout","field","type","slots","default","row","_createVNode2","_createTextVNode2","title","author","display_time","label","formatter","_","__","cellValue","ElTag","_slot","BaseButton","onClick","actionFn","console","log","canShowPagination","ref","showPagination","show","value","reserveIndex","custom","showSelections","path","index","changeTitle","showExpandedRows","selectAllNone","elTableRef","toggleAllSelection","showAction","delOrAddAction","_slot2","showStripe","showOrHiddenStripe","stripe","height","fixedHeaderOrAuto","getSelections","selections","getSelectionRows"],"mappings":"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"}