{"version":3,"mappings":"spBAmCA,MAAMA,EAAa,qFA3Bb,MAAE,aAAAC,CAAa,EAAIC,EAAU,EAE7BC,EAAOC,EAEPC,EAAYJ,EAAa,cAAc,EAEvCK,EAAMC,EAAQ,CAAE,KAAM,2BAA4B,MAAO,UAAW,EAEpEC,EAAeD,EAAQ,CAAE,KAAM,qCAAsC,MAAO,UAAW,EAEvFE,EAAWC,EAAY,EAGvBC,EAASC,EAAS,CACtB,KAAM,CACJ,OAAOH,EAAS,SAClB,EACA,IAAII,EAAc,CAChBJ,EAAS,UAAUI,CAAG,EAChB,MAAAC,EAAQC,EAAU,eAAe,EACvCN,EAAS,aAAaK,CAAK,EAC3BL,EAAS,eAAeK,CAAK,EAC7BX,EAAK,SAAUU,CAAG,EACpB,CACD,yUC5BKG,EAAmBC,GAAuB,CAC9C,MAAMC,EAAcC,EAAsB,EAEtCC,EAAK,OAAS,SAChBA,EAAK,OAAO,OAASH,EAEnBG,EAAK,OAAO,OAAe,MAAQH,EAEvCC,EAAY,iBAAiB,CAC3B,KAAMD,CAAA,CACP,EACDI,EAAgBJ,CAAM,CACxB,EAEaK,EAAY,KAahB,CACL,aAX0BL,GAAuBM,EAAA,wBACjD,MAAMC,EAAaJ,EAAK,OAElBK,EAAa,MAAMC,EAA8B,yCAAAC,EAAA,gEAAAA,EAAA,yDAAAV,CAAA,SAE5CO,EAAA,iBAAiBP,EAAQQ,EAAW,OAAO,EAEtDT,EAAgBC,CAAM,CACxB,EAIA,yECzBI,MAAE,aAAAhB,CAAa,EAAIC,EAAU,EAE7BG,EAAYJ,EAAa,iBAAiB,EAM1CiB,EAAcU,EAAe,EAE7BC,EAAUjB,EAAS,IAAMM,EAAY,YAAY,EAEjDY,EAAclB,EAAS,IAAMM,EAAY,gBAAgB,EAEzDa,EAAWC,GAAqB,CACpC,GAAIA,IAASC,EAAMH,CAAW,EAAE,KAAM,OAEtC,OAAO,SAAS,OAAO,EACvBZ,EAAY,iBAAiB,CAC3B,KAAAc,CAAA,CACD,EACK,MAAE,aAAAE,CAAa,EAAIZ,EAAU,EACnCY,EAAaF,CAAI,CACnB","names":["blackColor","getPrefixCls","useDesign","emit","__emit","prefixCls","Sun","useIcon","CrescentMoon","appStore","useAppStore","isDark","computed","val","color","getCssVar","setI18nLanguage","locale","localeStore","useLocaleStoreWithOut","i18n","setHtmlPageLang","useLocale","__async","globalI18n","langModule","__variableDynamicImportRuntimeHelper","__vitePreload","useLocaleStore","langMap","currentLang","setLang","lang","unref","changeLocale"],"ignoreList":[],"sources":["../../src/components/ThemeSwitch/src/ThemeSwitch.vue","../../src/hooks/web/useLocale.ts","../../src/components/LocaleDropdown/src/LocaleDropdown.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useAppStore } from '@/store/modules/app'\nimport { ElSwitch } from 'element-plus'\nimport { useIcon } from '@/hooks/web/useIcon'\nimport { useDesign } from '@/hooks/web/useDesign'\nimport { getCssVar } from '@/utils'\n\nconst { getPrefixCls } = useDesign()\n\nconst emit = defineEmits(['change'])\n\nconst prefixCls = getPrefixCls('theme-switch')\n\nconst Sun = useIcon({ icon: 'vi-emojione-monotone:sun', color: '#fde047' })\n\nconst CrescentMoon = useIcon({ icon: 'vi-emojione-monotone:crescent-moon', color: '#fde047' })\n\nconst appStore = useAppStore()\n\n// 初始化获取是否是暗黑主题\nconst isDark = computed({\n  get() {\n    return appStore.getIsDark\n  },\n  set(val: boolean) {\n    appStore.setIsDark(val)\n    const color = getCssVar('--el-bg-color')\n    appStore.setMenuTheme(color)\n    appStore.setHeaderTheme(color)\n    emit('change', val)\n  }\n})\n\n// 设置switch的背景颜色\nconst blackColor = 'var(--el-color-black)'\n</script>\n\n<template>\n  <ElSwitch\n    :class=\"prefixCls\"\n    v-model=\"isDark\"\n    inline-prompt\n    :border-color=\"blackColor\"\n    :inactive-color=\"blackColor\"\n    :active-color=\"blackColor\"\n    :active-icon=\"Sun\"\n    :inactive-icon=\"CrescentMoon\"\n  />\n</template>\n\n<style lang=\"less\" scoped>\n:deep(.el-switch__core .el-switch__inner .is-icon) {\n  overflow: visible;\n}\n</style>\n","import { i18n } from '@/plugins/vueI18n'\nimport { useLocaleStoreWithOut } from '@/store/modules/locale'\nimport { setHtmlPageLang } from '@/plugins/vueI18n/helper'\n\nconst setI18nLanguage = (locale: LocaleType) => {\n  const localeStore = useLocaleStoreWithOut()\n\n  if (i18n.mode === 'legacy') {\n    i18n.global.locale = locale\n  } else {\n    ;(i18n.global.locale as any).value = locale\n  }\n  localeStore.setCurrentLocale({\n    lang: locale\n  })\n  setHtmlPageLang(locale)\n}\n\nexport const useLocale = () => {\n  // Switching the language will change the locale of useI18n\n  // And submit to configuration modification\n  const changeLocale = async (locale: LocaleType) => {\n    const globalI18n = i18n.global\n\n    const langModule = await import(`../../locales/${locale}.ts`)\n\n    globalI18n.setLocaleMessage(locale, langModule.default)\n\n    setI18nLanguage(locale)\n  }\n\n  return {\n    changeLocale\n  }\n}\n","<script setup lang=\"ts\">\nimport { computed, unref } from 'vue'\nimport { ElDropdown, ElDropdownMenu, ElDropdownItem } from 'element-plus'\nimport { useLocaleStore } from '@/store/modules/locale'\nimport { useLocale } from '@/hooks/web/useLocale'\nimport { propTypes } from '@/utils/propTypes'\nimport { useDesign } from '@/hooks/web/useDesign'\n\nconst { getPrefixCls } = useDesign()\n\nconst prefixCls = getPrefixCls('locale-dropdown')\n\ndefineProps({\n  color: propTypes.string.def('')\n})\n\nconst localeStore = useLocaleStore()\n\nconst langMap = computed(() => localeStore.getLocaleMap)\n\nconst currentLang = computed(() => localeStore.getCurrentLocale)\n\nconst setLang = (lang: LocaleType) => {\n  if (lang === unref(currentLang).lang) return\n  // 需要重新加载页面让整个语言多初始化\n  window.location.reload()\n  localeStore.setCurrentLocale({\n    lang\n  })\n  const { changeLocale } = useLocale()\n  changeLocale(lang)\n}\n</script>\n\n<template>\n  <ElDropdown :class=\"prefixCls\" trigger=\"click\" @command=\"setLang\">\n    <Icon\n      :size=\"18\"\n      icon=\"vi-ion:language-sharp\"\n      class=\"cursor-pointer !p-0\"\n      :class=\"$attrs.class\"\n      :color=\"color\"\n    />\n    <template #dropdown>\n      <ElDropdownMenu>\n        <ElDropdownItem v-for=\"item in langMap\" :key=\"item.lang\" :command=\"item.lang\">\n          {{ item.name }}\n        </ElDropdownItem>\n      </ElDropdownMenu>\n    </template>\n  </ElDropdown>\n</template>\n"],"file":"assets/LocaleDropdown.vue_vue_type_script_setup_true_lang-CLrqkjaO.js"}