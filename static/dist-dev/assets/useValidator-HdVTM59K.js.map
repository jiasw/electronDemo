{"version":3,"file":"useValidator-HdVTM59K.js","sources":["../../src/hooks/web/useValidator.ts"],"sourcesContent":["import { useI18n } from '@/hooks/web/useI18n'\nimport { FormItemRule } from 'element-plus'\n\nconst { t } = useI18n()\n\ninterface LengthRange {\n  min: number\n  max: number\n  message?: string\n}\n\nexport const useValidator = () => {\n  const required = (message?: string): FormItemRule => {\n    return {\n      required: true,\n      message: message || t('common.required')\n    }\n  }\n\n  const lengthRange = (options: LengthRange): FormItemRule => {\n    const { min, max, message } = options\n\n    return {\n      min,\n      max,\n      message: message || t('common.lengthRange', { min, max })\n    }\n  }\n\n  const notSpace = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (val?.indexOf(' ') !== -1) {\n          callback(new Error(message || t('common.notSpace')))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  const notSpecialCharacters = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (/[`~!@#$%^&*()_+<>?:\"{},.\\/;'[\\]]/gi.test(val)) {\n          callback(new Error(message || t('common.notSpecialCharacters')))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  const phone = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (!val) return callback()\n        if (!/^1[3456789]\\d{9}$/.test(val)) {\n          callback(new Error(message || '请输入正确的手机号码'))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  const email = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (!val) return callback()\n        if (!/^(\\w-*\\.*)+@(\\w-?)+(\\.\\w{2,})+$/.test(val)) {\n          callback(new Error(message || '请输入正确的邮箱'))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  const maxlength = (max: number): FormItemRule => {\n    return {\n      max,\n      message: '长度不能超过' + max + '个字符'\n    }\n  }\n\n  const check = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (!val) {\n          callback(new Error(message || t('common.required')))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  return {\n    required,\n    lengthRange,\n    notSpace,\n    notSpecialCharacters,\n    phone,\n    email,\n    maxlength,\n    check\n  }\n}\n"],"names":["t","useI18n","useValidator","message","options","min","max","_","val","callback"],"mappings":"wCAGA,KAAM,CAAE,EAAAA,CAAE,EAAIC,EAAQ,EAQTC,EAAe,KAuFnB,CACL,SAvFgBC,IACT,CACL,SAAU,GACV,QAASA,GAAWH,EAAE,iBAAiB,CACzC,GAoFA,YAjFmBI,GAAuC,CAC1D,KAAM,CAAE,IAAAC,EAAK,IAAAC,EAAK,QAAAH,CAAY,EAAAC,EAEvB,MAAA,CACL,IAAAC,EACA,IAAAC,EACA,QAASH,GAAWH,EAAE,qBAAsB,CAAE,IAAAK,EAAK,IAAAC,CAAK,CAAA,CAC1D,CACF,EA0EE,SAxEgBH,IACT,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,EAC3BD,GAAA,YAAAA,EAAK,QAAQ,QAAS,GACxBC,EAAS,IAAI,MAAMN,GAAWH,EAAE,iBAAiB,CAAC,CAAC,EAE1CS,EAAA,CACX,CAEJ,GAgEA,qBA7D4BN,IACrB,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,CAC3B,qCAAqC,KAAKD,CAAG,EAC/CC,EAAS,IAAI,MAAMN,GAAWH,EAAE,6BAA6B,CAAC,CAAC,EAEtDS,EAAA,CACX,CAEJ,GAqDA,MAlDaN,IACN,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,CAC3B,GAAA,CAACD,EAAK,OAAOC,EAAS,EACrB,oBAAoB,KAAKD,CAAG,EAGtBC,EAAA,EAFTA,EAAS,IAAI,MAAMN,GAAW,YAAY,CAAC,CAG7C,CAEJ,GAyCA,MAtCaA,IACN,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,CAC3B,GAAA,CAACD,EAAK,OAAOC,EAAS,EACrB,kCAAkC,KAAKD,CAAG,EAGpCC,EAAA,EAFTA,EAAS,IAAI,MAAMN,GAAW,UAAU,CAAC,CAG3C,CAEJ,GA6BA,UA1BiBG,IACV,CACL,IAAAA,EACA,QAAS,SAAWA,EAAM,KAC5B,GAuBA,MApBaH,IACN,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,CAC1BD,EAGMC,EAAA,EAFTA,EAAS,IAAI,MAAMN,GAAWH,EAAE,iBAAiB,CAAC,CAAC,CAGrD,CAEJ,EAYF"}