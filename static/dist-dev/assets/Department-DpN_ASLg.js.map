{"version":3,"file":"Department-DpN_ASLg.js","sources":["../../src/views/Authorization/Department/Department.vue"],"sourcesContent":["<script setup lang=\"tsx\">\nimport { ContentWrap } from '@/components/ContentWrap'\nimport { Search } from '@/components/Search'\nimport { Dialog } from '@/components/Dialog'\nimport { useI18n } from '@/hooks/web/useI18n'\nimport { ElTag } from 'element-plus'\nimport { Table } from '@/components/Table'\nimport {\n  getDepartmentApi,\n  getDepartmentTableApi,\n  saveDepartmentApi,\n  deleteDepartmentApi\n} from '@/api/department'\nimport type { DepartmentItem } from '@/api/department/types'\nimport { useTable } from '@/hooks/web/useTable'\nimport { ref, unref, reactive } from 'vue'\nimport Write from './components/Write.vue'\nimport Detail from './components/Detail.vue'\nimport { CrudSchema, useCrudSchemas } from '@/hooks/web/useCrudSchemas'\nimport { BaseButton } from '@/components/Button'\n\nconst ids = ref<string[]>([])\n\nconst { tableRegister, tableState, tableMethods } = useTable({\n  fetchDataApi: async () => {\n    const { currentPage, pageSize } = tableState\n    const res = await getDepartmentTableApi({\n      pageIndex: unref(currentPage),\n      pageSize: unref(pageSize),\n      ...unref(searchParams)\n    })\n    return {\n      list: res.data.list,\n      total: res.data.total\n    }\n  },\n  fetchDelApi: async () => {\n    const res = await deleteDepartmentApi(unref(ids))\n    return !!res\n  }\n})\nconst { loading, dataList, total, currentPage, pageSize } = tableState\nconst { getList, getElTableExpose, delList } = tableMethods\n\nconst searchParams = ref({})\nconst setSearchParams = (params: any) => {\n  searchParams.value = params\n  getList()\n}\n\nconst { t } = useI18n()\n\nconst crudSchemas = reactive<CrudSchema[]>([\n  {\n    field: 'selection',\n    search: {\n      hidden: true\n    },\n    form: {\n      hidden: true\n    },\n    detail: {\n      hidden: true\n    },\n    table: {\n      type: 'selection'\n    }\n  },\n  {\n    field: 'index',\n    label: t('tableDemo.index'),\n    type: 'index',\n    search: {\n      hidden: true\n    },\n    form: {\n      hidden: true\n    },\n    detail: {\n      hidden: true\n    }\n  },\n  {\n    field: 'id',\n    label: t('userDemo.departmentName'),\n    table: {\n      slots: {\n        default: (data: any) => {\n          return <>{data.row.departmentName}</>\n        }\n      }\n    },\n    form: {\n      component: 'TreeSelect',\n      componentProps: {\n        nodeKey: 'id',\n        props: {\n          label: 'departmentName'\n        }\n      },\n      optionApi: async () => {\n        const res = await getDepartmentApi()\n        return res.data.list\n      }\n    },\n    detail: {\n      slots: {\n        default: (data: any) => {\n          return <>{data.departmentName}</>\n        }\n      }\n    }\n  },\n  {\n    field: 'status',\n    label: t('userDemo.status'),\n    search: {\n      hidden: true\n    },\n    table: {\n      slots: {\n        default: (data: any) => {\n          const status = data.row.status\n          return (\n            <>\n              <ElTag type={status === 0 ? 'danger' : 'success'}>\n                {status === 1 ? t('userDemo.enable') : t('userDemo.disable')}\n              </ElTag>\n            </>\n          )\n        }\n      }\n    },\n    form: {\n      component: 'Select',\n      componentProps: {\n        options: [\n          {\n            value: 0,\n            label: t('userDemo.disable')\n          },\n          {\n            value: 1,\n            label: t('userDemo.enable')\n          }\n        ]\n      }\n    },\n    detail: {\n      slots: {\n        default: (data: any) => {\n          return (\n            <>\n              <ElTag type={data.status === 0 ? 'danger' : 'success'}>\n                {data.status === 1 ? t('userDemo.enable') : t('userDemo.disable')}\n              </ElTag>\n            </>\n          )\n        }\n      }\n    }\n  },\n  {\n    field: 'createTime',\n    label: t('tableDemo.displayTime'),\n    search: {\n      hidden: true\n    },\n    form: {\n      hidden: true\n    }\n  },\n  {\n    field: 'remark',\n    label: t('userDemo.remark'),\n    search: {\n      hidden: true\n    },\n    form: {\n      component: 'Input',\n      componentProps: {\n        type: 'textarea',\n        rows: 5\n      },\n      colProps: {\n        span: 24\n      }\n    },\n    detail: {\n      slots: {\n        default: (data: any) => {\n          return <>{data.remark}</>\n        }\n      }\n    }\n  },\n  {\n    field: 'action',\n    width: '260px',\n    label: t('tableDemo.action'),\n    search: {\n      hidden: true\n    },\n    form: {\n      hidden: true\n    },\n    detail: {\n      hidden: true\n    },\n    table: {\n      slots: {\n        default: (data: any) => {\n          return (\n            <>\n              <BaseButton type=\"primary\" onClick={() => action(data.row, 'edit')}>\n                {t('exampleDemo.edit')}\n              </BaseButton>\n              <BaseButton type=\"success\" onClick={() => action(data.row, 'detail')}>\n                {t('exampleDemo.detail')}\n              </BaseButton>\n              <BaseButton type=\"danger\" onClick={() => delData(data.row)}>\n                {t('exampleDemo.del')}\n              </BaseButton>\n            </>\n          )\n        }\n      }\n    }\n  }\n])\n\n// @ts-ignore\nconst { allSchemas } = useCrudSchemas(crudSchemas)\n\nconst dialogVisible = ref(false)\nconst dialogTitle = ref('')\n\nconst currentRow = ref<DepartmentItem | null>(null)\nconst actionType = ref('')\n\nconst AddAction = () => {\n  dialogTitle.value = t('exampleDemo.add')\n  currentRow.value = null\n  dialogVisible.value = true\n  actionType.value = ''\n}\n\nconst delLoading = ref(false)\n\nconst delData = async (row: DepartmentItem | null) => {\n  const elTableExpose = await getElTableExpose()\n  ids.value = row\n    ? [row.id]\n    : elTableExpose?.getSelectionRows().map((v: DepartmentItem) => v.id) || []\n  delLoading.value = true\n  await delList(unref(ids).length).finally(() => {\n    delLoading.value = false\n  })\n}\n\nconst action = (row: DepartmentItem, type: string) => {\n  dialogTitle.value = t(type === 'edit' ? 'exampleDemo.edit' : 'exampleDemo.detail')\n  actionType.value = type\n  currentRow.value = row\n  dialogVisible.value = true\n}\n\nconst writeRef = ref<ComponentRef<typeof Write>>()\n\nconst saveLoading = ref(false)\n\nconst save = async () => {\n  const write = unref(writeRef)\n  const formData = await write?.submit()\n  if (formData) {\n    saveLoading.value = true\n    const res = await saveDepartmentApi(formData)\n      .catch(() => {})\n      .finally(() => {\n        saveLoading.value = false\n      })\n    if (res) {\n      dialogVisible.value = false\n      currentPage.value = 1\n      getList()\n    }\n  }\n}\n</script>\n\n<template>\n  <ContentWrap>\n    <Search :schema=\"allSchemas.searchSchema\" @search=\"setSearchParams\" @reset=\"setSearchParams\" />\n\n    <div class=\"mb-10px\">\n      <BaseButton type=\"primary\" @click=\"AddAction\">{{ t('exampleDemo.add') }}</BaseButton>\n      <BaseButton :loading=\"delLoading\" type=\"danger\" @click=\"delData(null)\">\n        {{ t('exampleDemo.del') }}\n      </BaseButton>\n    </div>\n\n    <Table\n      v-model:pageSize=\"pageSize\"\n      v-model:currentPage=\"currentPage\"\n      :columns=\"allSchemas.tableColumns\"\n      :data=\"dataList\"\n      :loading=\"loading\"\n      :pagination=\"{\n        total: total\n      }\"\n      @register=\"tableRegister\"\n    />\n  </ContentWrap>\n\n  <Dialog v-model=\"dialogVisible\" :title=\"dialogTitle\">\n    <Write\n      v-if=\"actionType !== 'detail'\"\n      ref=\"writeRef\"\n      :form-schema=\"allSchemas.formSchema\"\n      :current-row=\"currentRow\"\n    />\n\n    <Detail\n      v-if=\"actionType === 'detail'\"\n      :detail-schema=\"allSchemas.detailSchema\"\n      :current-row=\"currentRow\"\n    />\n\n    <template #footer>\n      <BaseButton\n        v-if=\"actionType !== 'detail'\"\n        type=\"primary\"\n        :loading=\"saveLoading\"\n        @click=\"save\"\n      >\n        {{ t('exampleDemo.save') }}\n      </BaseButton>\n      <BaseButton @click=\"dialogVisible = false\">{{ t('dialogDemo.close') }}</BaseButton>\n    </template>\n  </Dialog>\n</template>\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","ids","ref","tableRegister","tableState","tableMethods","useTable","fetchDataApi","__async","currentPage","pageSize","res","getDepartmentTableApi","__spreadValues","pageIndex","unref","searchParams","list","data","total","fetchDelApi","deleteDepartmentApi","loading","dataList","getList","getElTableExpose","delList","setSearchParams","params","value","t","useI18n","crudSchemas","reactive","field","search","hidden","form","detail","table","type","label","slots","default","_createVNode2","_Fragment2","row","departmentName","component","componentProps","nodeKey","props","optionApi","getDepartmentApi","status","ElTag","options","rows","colProps","span","remark","width","_slot","_slot2","_slot3","BaseButton","onClick","action","delData","allSchemas","useCrudSchemas","dialogVisible","dialogTitle","currentRow","actionType","AddAction","delLoading","elTableExpose","id","getSelectionRows","map","v","length","finally","writeRef","saveLoading","save","write","formData","submit","saveDepartmentApi","catch"],"mappings":"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"}